load ("maxima_from_go.mac");

/* ideally maintain one list per module or package, not sure which */
methods_list: [];

translate_from_go_json (name, [optional]) := 
    block ([blobs, decls, decls_gendecls, decls_funcdecls, decls_others,
            name_input, name_output_gendecls, name_output_funcdecls, name_output_other,
            output_stream], 
           name_input: sconcat (name, "1.json"),
           if (output_stream: assoc ('output, optional)) = false 
               then (name_output_gendecls: sconcat (name, "_gendecls_go.mac"),
                     name_output_funcdecls: sconcat (name, "_funcdecls_go.mac"),
                     name_output_other: sconcat (name, "_other_go.mac")),

           blobs: read_json (name_input),
           decls: blobs // "Decls",
           decls_gendecls: sublist (decls, lambda ([b], (b // "NodeType") = "GenDecl")),
           decls_funcdecls: sublist (decls, lambda ([b], (b // "NodeType") = "FuncDecl")),
           decls_other: sublist (decls, lambda ([b], (b // "NodeType") # "GenDecl" and (b // "NodeType") # "FuncDecl")),

           print ("length decls_gendecls -->", length (decls_gendecls)),
           print ("length decls_funcdecls -->", length (decls_funcdecls)),
           print ("length decls_other -->", length (decls_other)),

           foo: lambda ([f], if output_stream = false then f else output_stream),

           print ("output results from apply_all_rules on decls_gendecls to", foo (name_output_gendecls)),

           with_stdout (foo (name_output_gendecls),
               for b in decls_gendecls
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))),

           print ("output results from apply_all_rules on decls_other to", foo (name_output_other)),

           with_stdout (foo (name_output_other),
               for b in decls_other
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))),

           print ("output results from apply_all_rules on decls_funcdecls to", foo (name_output_funcdecls)),

           with_stdout (foo (name_output_funcdecls),
               for b in decls_funcdecls
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))));

