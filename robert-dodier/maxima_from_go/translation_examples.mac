load ("maxima_from_go.mac");

/* ideally maintain one list per module or package, not sure which */
methods_list: [];

blob1:read_json("FromSexa.json");
results1: apply_all_rules (blob1);
grind (last (results1));
''(last (results1));

blob2: read_json ("FromSexaSec.json");
results2: apply_all_rules (blob2);
grind (last (results2));
''(last (results2));

FromSexa ("+", hh, mm, ss);
FromSexa ("-", hh, mm, ss);

kill (FromSexa, FromSexaSec);

/*
debugmode (true);

for i thru length (sundial_decls_funcdecls)
    do block ([b: sundial_decls_funcdecls[i], r],
              print ("i -->", i),
              r: apply_all_rules (b),
              grind (last (r)),
              print (""));
 */

translate_from_go_json (name) := 
    block ([blobs, decls, decls_gendecls, decls_funcdecls, decls_others,
            name_input, name_output_gendecls, name_output_funcdecls, name_output_other], 
           name_input: sconcat (name, "1.json"),
           name_output_gendecls: sconcat (name, "_gendecls_go.mac"),
           name_output_funcdecls: sconcat (name, "_funcdecls_go.mac"),
           name_output_other: sconcat (name, "_other_go.mac"),

           blobs: read_json (name_input),
           decls: blobs // "Decls",
           decls_gendecls: sublist (decls, lambda ([b], (b // "NodeType") = "GenDecl")),
           decls_funcdecls: sublist (decls, lambda ([b], (b // "NodeType") = "FuncDecl")),
           decls_other: sublist (decls, lambda ([b], (b // "NodeType") # "GenDecl" and (b // "NodeType") # "FuncDecl")),

           print ("length decls_gendecls -->", length (decls_gendecls)),
           print ("length decls_funcdecls -->", length (decls_funcdecls)),
           print ("length decls_other -->", length (decls_other)),

           print ("output results from apply_all_rules on decls_gendecls to", name_output_gendecls),

           with_stdout (name_output_gendecls,
               for b in decls_gendecls
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))),

           print ("output results from apply_all_rules on decls_other to", name_output_other),

           with_stdout (name_output_other,
               for b in decls_other
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))),

           print ("output results from apply_all_rules on decls_funcdecls to", name_output_funcdecls),

           with_stdout (name_output_funcdecls,
               for b in decls_funcdecls
                   do block ([r: apply_all_rules (b)],
                             print (""),
                             grind (last (r)),
                             print (""))));

translate_from_go_json ("unit");
translate_from_go_json ("solar");
translate_from_go_json ("nutation");
translate_from_go_json ("sundial");
